#! /bin/sh
#---------------------------------------------------------------------
#
#   File:   GuitarEffects
#
#   Contains:   This file starts up the live performance as well as practice
#       applications and automatically configures them.
#
#
#   Written By:     Elias Keshishoglou on Thu Jun 25 20:49:03 PDT 2009
#
#   Copyright :    2009-2021 Elias Keshishoglou all rights reserved.
#
#
#---------------------------------------------------------------------#

function Delay {
    echo "Delay "`expr $1 \* 3`" "$1
    sleep `expr $1 \* 2`
}

#---------------------------------------------------------------------#
#
# Find the devices that Jack should connect with.
#
#---------------------------------------------------------------------#
function FindDevice {
    
    # Get a list of all devices that can record
    export DeviceList=`arecord -l | tail -n +2`
    
    # Check for USB devices
    export USBDevice="`echo "$DeviceList" | grep -i USB`"
    export USBName=`echo $USBDevice | cut -d "[" -f2 | cut -d "]" -f1`
    HaveUSBInt=$?
    if [ "$HaveUSBInt" -eq 0 ]; then
        echo "We have a USB device "$USBDevice
    fi
    HaveUSBInt=1
    export USBCardNum=`echo "$USBDevice" | grep -Po '(?<=card )\W*\K[^ :]*'`
    export USBDeviceNum=`echo "$USBDevice" | grep -Po '(?<=device )\W*\K[^ :]*'`
    echo " -- "
    echo "D: "$USBDevice" N: "$USBName" CN "$USBCardNum" CI "$USBDeviceNum
    
    # export SndCardHW=`./HwSndParams hw:$USBCardNum`
    
    #   ./HwSndParams hw:1 | grep "Supported" | awk '{print $3}'
    #   ./HwSndParams hw:1 | grep "Sample" | awk '{print $3}'
    
    RouterNameIn="LiveMusic"
    RouterNameOut="LiveMusic"
    DrumNameIn="Hydrogen"
    DrumNameOut="Hydrogen"
    MidiGuitarInputPort="gx_head_amp"
    
    # Piano connections
    KeyBoardMidi="UX16"
    
    # Midi controller
    #   PedalBoardIn="Uno"
    KeyBoardMidi="Uno"
    Sequencer="rosegarden"
    
    AudioSampleRate=48000
    JBuffer=256
    JPeriod=2
    
    # Let's check the hardware we have and see what we can do
    # The Default is none.
    AudioDevice="None"
    DeviceAdder=""
    
    # Look for the Intel device, usually the built in sound device
    Device="Intel"
    echo $DeviceList | grep $Device >/dev/null
    if [ "$?" -eq 0 -a $HaveUSBInt -ne 0 ]; then
        echo "We have " $Device  >> $LogFile
        AudioDevice=$Device
        # This is the Audio interface
        AudioInDevice=$Device
        AudioOutDevice=$Device
        #     MidiGuitarInputPort="rakarrack"
        PedalBoardIn="Midilink"
        PedalBoardIn="UX16"
        PedalBoardIn="Uno"
        MidiOut="Midilink"
        AudioSampleRate=48000
        JBuffer=1024
        JPeriod=3
    fi
    
    # ART Tube Pre
    Device="USB Audio CODEC"
    echo $DeviceList | grep "${Device}"  >/dev/null
    if [ "$?" -eq 0 ]; then
        echo "We have " $Device >> $LogFile
        AudioDevice=$Device
        # This is the Audio interface
        AudioInDevice=$Device
        AudioOutDevice=$Device
        MidiGuitarInputPort="Midilink"
        PedalBoardIn="UX16"
        PedalBoardIn="uno"
        MidiOut="Midilink"
    fi
    
    # If we have the edirol UA-25 use that instead.
    Device="UA-25"
    echo $DeviceList | grep "${Device}"  >/dev/null
    if [ "$?" -eq 0 ]; then
        echo "We have " $Device >> $LogFile
        AudioDevice=$Device
        #       AudioSampleRate=96000
        
        # This is the Audio interface
        AudioInDevice=$Device
        AudioOutDevice=$Device
        MidiGuitarInputPort=$Device
    fi
    
    # If we have the Quattro use that instead.
    Device="Quattro"
    echo $DeviceList | grep "${Device}"  >/dev/null
    if [ "$?" -eq 0 ]; then
        echo "We have " $Device >> $LogFile
        AudioDevice=$Device
        # This is the Audio interface
        AudioInDevice=$Device
        AudioOutDevice=$Device
    fi
    
    # If we have the Quattro use that instead.
    Device="UA-30"
    echo $DeviceList | grep "${Device}"  >/dev/null
    if [ "$?" -eq 0 ]; then
        echo "We have " $Device >> $LogFile
        AudioDevice=$Device
        # This is the Audio interface
        AudioInDevice=$Device
        AudioOutDevice=$Device
    fi
    
    # If we have the M-Audio FastTrack Pro use that instead.
    Device="FastTrack"
    echo $DeviceList | grep "${Device}"  >/dev/null
    if [ "$?" -eq 0 ]; then
        
        echo "We have " $Device >> $LogFile
        #   jackd -p128 -t1000 -dalsa -dhw:2,1 -r44100 -p128 -n4
        AudioDevice=$Device
        # This is the Audio interface
        AudioInDevice=$Device
        AudioOutDevice=$Device
        MidiGuitarInputPort=$Device
        DeviceAdder=",1"
    fi
    
    # If we have the Alesis IO4
    Device="iO4"
    echo $DeviceList | grep "${Device}"  >/dev/null
    if [ "$?" -eq 0 ]; then
        
        echo "We have " $Device >> $LogFile
        AudioSampleRate=48000
        AudioDevice=$Device
        AudioInDevice=$Device
        AudioOutDevice=$Device
        JBuffer=128
        JPeriod=3
        
        MidiGuitarInputPort="iO4"
        PedalBoardIn="iO4"
        MidiOut="iO4"
        #     DeviceAdder=",1"
    fi
    
    # If we have the Alesis Mini IO
    Device="iO Hub"
    echo $DeviceList | grep "${Device}"
    if [ "$?" -eq 0 ]; then
        echo "We have " $Device >> $LogFile
        # AudioSampleRate=96000
        AudioSampleRate=48000
        AudioDevice="$Device"
        AudioInDevice=$Device
        AudioOutDevice=$Device
    fi
    
    # If we have the Focuswrite scarlett
    Device="Scarlett Solo USB"
    echo $DeviceList | grep "${Device}"
    if [ "$?" -eq 0 ]; then
        echo "We have " $Device >> $LogFile
        #   AudioSampleRate=48000
        AudioSampleRate=96000
        JBuffer=256
        JPeriod=2
        AudioDevice="$Device"
        AudioInDevice="Scarlett Solo"
        AudioOutDevice="Scarlett Solo"
    fi
    
    # If we have the iRid 2
    Device="iRig HD 2"
    echo $DeviceList | grep "${Device}"
    if [ "$?" -eq 0 ]; then
        echo "We have " $Device >> $LogFile
        # AudioSampleRate=48000
        AudioSampleRate=96000
        JBuffer=256
        JPeriod=2
        # AudioSampleRate=192000
        AudioDevice="$Device"
        AudioInDevice="$Device"
        AudioOutDevice="$Device"
    fi
    
    # If we have the NUX Pocket port
    Device="NUX USB Audio"
    echo $DeviceList | grep "${Device}"
    if [ "$?" -eq 0 ]; then
        echo "We have " $Device >> $LogFile
        AudioSampleRate=48000
        # AudioSampleRate=96000
        JBuffer=128
        JPeriod=3
        # AudioSampleRate=192000
        AudioDevice="$Device"
        AudioInDevice="$Device"
        AudioOutDevice="$Device"
        amixer -c $USBCardNum sset 'Mic',0 2032
        amixer -c $USBCardNum sset 'NUX USB Audio 2.0 ',0 2032
    fi
    
    # If we are n a Raspberry PI with the PISound card.
    Device="pisound"
    echo $DeviceList | grep "${Device}"
    if [ "$?" -eq 0 ]; then
        echo "We have " $Device >> $LogFile
        #       AudioSampleRate=48000
        AudioSampleRate=96000
        #       AudioSampleRate=192000
        AudioDevice="$Device"
        AudioInDevice="$Device"
        AudioOutDevice="$Device"
    fi
    
    # If we have
    Device="USB Advanced Audio Device"
    echo $DeviceList | grep "${Device}"
    if [ "$?" -eq 0 ]; then
        echo "We have " $Device >> $LogFile
        AudioSampleRate=48000
        # AudioSampleRate=96000
        #       AudioSampleRate=192000
        AudioDevice="$Device"
        AudioInDevice="$Device"
        AudioOutDevice="$Device"
    fi
    
    # Check if we have found something.
    if test "$AudioDevice" = "None"; then
        echo "We found no interfaces"  >> $LogFile
        #        exit 1
    fi
    
    echo "Audio Interface is: " ${AudioInDevice}" " ${AudioOutDevice}  >> $LogFile
    # Get the port numbers of the interface
    AudioInHW=`arecord -l | grep -m 1 "${AudioInDevice}" | awk '{ print $2}' | cut -d":" -f1`
    AudioOutHW=`arecord -l | grep -m 1 "${AudioOutDevice}" | awk '{ print $2}' | cut -d":" -f1`
    export RecordFileName=/home/Music/Rehearsals/`date +"%Y%m%d"`
    echo "Audio Number is: " ${AudioInHW}" " ${AudioOutHW}  >> $LogFile
    
    #   Patchage takes a while to start so kick it off early.
    # Run the patch bay
    echo "***************** Starting Patch Bay"
    # patchage  > /dev/null 2>&1 &
    # catia > $LogFile 2>&1 &
    ${PatchBay} > $LogFile 2>&1 &
}

#---------------------------------------------------------------------#
#
# Set the Definitions
#
#---------------------------------------------------------------------#
function SetDefinitions {
    # This is the midi router for converting Program Change
    RouterNameIn="LiveMusic"
    RouterNameOut="LiveMusic"
    DrumNameIn="Hydrogen"
    DrumNameOut="Hydrogen"
    
    # Piano connections
    #   KeyBoardMidi="UX16"
    #   PedalBoardIn="Uno"
    KeyBoardMidi="Uno"
    
    Sequencer="rosegarden"
    
    echo "Audio Interface is: " ${AudioInDevice}  >> $LogFile
    # Get the port numbers of the interface
    AudioInHW=`arecord -l | grep -m 1 "${AudioInDevice}" | awk '{ print $2}' | cut -d":" -f1`
    AudioOutHW=`arecord -l | grep -m 1 "${AudioOutDevice}" | awk '{ print $2}' | cut -d":" -f1`
    
    # Record file name is based on date.
    export RecordFileName=/home/Music/Rehearsals/`date +"%Y%m%d"`
    
    #   if [ ! -d "$RecordFileName" ]; then
    #       echo -e "\nCreating \"$RecordFileName\"\n"
    #       cp -r /home/Music/Rehearsals/Template $RecordFileName
    #   fi
}

#---------------------------------------------------------------------#
#
# Startup Jack.
#
#---------------------------------------------------------------------#
function StartJack {

    # See if Jackd is already running
    if [ `ps -ew|grep -c jackd` != 0 ] ; then
        ps -ef | grep jackd | grep -v grep | awk '{print $2}' | xargs kill -9
        Delay 2
    fi
    # https://wiki.linuxaudio.org/wiki/list_of_jack_frame_period_settings_ideal_for_usb_interface
    #
    if [ "${AudioInDevice}" == "iO4" ] ; then
        #       jackd -R -t5000 -dalsa -Chw:$AudioInHW$DeviceAdder -Phw:$AudioOutHW$DeviceAdder -r$AudioSampleRate -p128 -n3 &
        echo "Audio i04, run jack twice"
        jackd -R -t5000 -dalsa -Chw:$AudioInHW$DeviceAdder -Phw:$AudioOutHW$DeviceAdder -r$AudioSampleRate -p64 -n2 &
        sleep 3
        /home/ebin/KillAll jackd
        sleep 2
    fi
    
    # Now start jack.
    echo "****************" >> $LogFile
    echo "Starting Jack"   >> $LogFile
    # Now start jack.
    echo "****************"
    echo "Starting Jack"
    
    nice -18 jackd \
    -c h -R \
    -t5000 \
    -dalsa \
    -Chw:$AudioInHW$DeviceAdder \
    -Phw:$AudioOutHW$DeviceAdder \
    -r$AudioSampleRate -p$JBuffer -n$JPeriod >> $LogFile 2>&1 &
    
    echo "****************"
    echo "****************"  >> $LogFile
    echo "jackd  -c h -R -t5000 -p40 \
    -dalsa  -Chw:"$AudioInHW$DeviceAdder" -Phw:"$AudioOutHW$DeviceAdder \
    "-r"$AudioSampleRate" -p"$JBuffer" -n"$JPeriod
    echo "****************" >> $LogFile
    echo "****************"
    
    # Jack can be a bit slow to come up.
    Delay 2
    echo " About to Start Jack-Volume"
    nice -18 jack-volume -p 9952 -n 1  >> $LogFile 2>&1 &
    
    if [ `ps -ew | grep -c jackd` == 0 ] ; then
        echo "Sleeping for jackd"  >> $LogFile
        Delay 1
    fi
    
    if [ `ps -ew | grep -c jackd` == 0 ] ; then
        echo "Sleeping for jackd...Again"  >> $LogFile
        Delay 1
    fi
    
    # Route all normal applications thru Jack also
    # pulseaudio --kill
    # pulseaudio -nF $EffectsDir/jack.pa &
    # indicator-sound pulseaudio pulseaudio-esound-compat
    # pulseaudio-module-bluetooth pulseaudio-module-jack pulseaudio-module-x11
    # pulseaudio -L module-jack-sink -L module-jack-source
    
    # for Debug
    if test "${2}" = "System"; then
        exit 0
    fi
}


#---------------------------------------------------------------------#
#
# Startup Set Up Connections
#
#---------------------------------------------------------------------#
function SetUpConnections {
    
    # ********************************
    # **** Alsa sound if no USB interface
    # ********************************
    
    # Turn on Line input as source.
    #   amixer cset numid=8,iface=MIXER,name='Input Source' 0
    
    # Turn on the Headphone output
    amixer cset numid=6,iface=MIXER,name='Headphone Playback Switch' 1
    
    # Turn on the Master output
    amixer cset numid=10,iface=MIXER,name='Master Playback Switch' 1
    
    # Set the input mode to be a line level signal not a mic.
    amixer cset numid=5,iface=MIXER,name='Mic Jack Mode' 1
    
    amixer sset "Mic Boost" 0
    #   amixer sset "Capture" 70
    amixer cset name='Capture Switch' 2
    
    # Max out the USB Device.
    amixer -c 1 sset 'PCM' 128
    
    amixer sset 'Master' 100
    
    # ********************************
    # **** Definitions
    # ********************************
    MainOut1="jack-volume:input_1"
    MainOut2="jack-volume:input_1"
    
    PedalBoardName="EliasPedal3"
    KeyBoardMidi="Uno"
    MidiGuitarMidi="LiveMusic"
    
    # ********************************
    # **** Alsa midi connections
    # ********************************
    aconnect "Fishman TriplePlay":"0" "LiveMusic Input":"0"
    aconnect "USB Uno MIDI Interface":"0" "LiveMusic Input":"0"
    aconnect "EliasPedal3":"0" "LiveMusic Input":"0"
    aconnect "LPD8":"0" "LiveMusic Input":"0"
    
    aconnect "LiveMusic Output":"0" "FLUID Synth (qsynth)":"0"
    aconnect "LiveMusic Output":"5" "FLUID Synth (qsynth)":"0"
    aconnect "LiveMusic Output":"6" "EliasPedal3":"0"
    aconnect "LiveMusic Output":"7" "LPD8":"0"
    aconnect "Midi Through":"0" "FLUID Synth (qsynth)":"0"
    aconnect "Reloop KeyFadr":"0" "LiveDAW Input":"0"
    
    # ********************************
    # **** Jack audio and midi connections
    # ********************************
    
    # To find devices
    # jack_lsp -c
    
    # Midi Sound generato
    MidiSoundOut=`jack_lsp -c |  grep "FLUID" | tail -1`
    
    # Connect Jack_Volume to Main
    jack_connect jack-volume:output_1 system:playback_1
    jack_connect jack-volume:output_1 system:playback_2
    
    
    # Guitar in goes to effects Rack
    echo "jack_connect system:capture_1 gx_head_amp:in_1"
    jack_connect system:capture_1 gx_head_amp:in_0
    jack_connect system:capture_2 gx_head_amp:in_0
    
    echo "Guitatix Audio to Jack Volume"
    jack_connect gx_head_fx:out_0 $MainOut1
    jack_connect gx_head_fx:out_1 $MainOut1
    jack_disconnect gx_head_fx:out_1 system:playback_1
    jack_disconnect gx_head_fx:out_0 system:playback_2
    
    # Connect Guitarix out to looper in
    jack_connect gx_head_fx:out_1 sooperlooper:common_in_1
    #   jack_connect gx_head_fx:out_2 sooperlooper:common_in_2
    
    # Connect the Looper to the main outputs
    jack_connect sooperlooper:common_out_1 $MainOut1
    jack_connect sooperlooper:common_out_1 $MainOut2
    jack_connect sooperlooper:common_out_2 $MainOut1
    jack_connect sooperlooper:common_out_2 $MainOut2
    
    # Soundfont player get connected to the Main playback device.
    jack_connect qsynth:left jack-volume:input_1
    jack_connect qsynth:right jack-volume:input_1
    jack_disconnect qsynth:left system:playback_1
    jack_disconnect qsynth:right system:playback_2
    
    # Connect qsynth to the Looper.
    jack_connect qsynth:left sooperlooper:common_in_1
    jack_connect qsynth:left sooperlooper:common_in_2
    
    # Drum Machine
    jack_connect Hydrogen:out_L sooperlooper:common_in_1
    jack_connect Hydrogen:out_R sooperlooper:common_in_2
    jack_connect Hydrogen:out_L $MainOut1
    jack_connect Hydrogen:out_R $MainOut2
    
    jack_connect Clementine:out_jackaudiosink-1_1 $MainOut1
    jack_connect Clementine:out_jackaudiosink-1_1 $MainOut2
    
    jack_connect Guitarix:out_1 "ardour:Audio 1/in 1"
    jack_connect gx_head_fx:out_1 "ardour:Audio 1/in 1"
    
    # Muse Connection
    jack_connect "MusE:Out 1-0" "system:playback_1"
    jack_connect "MusE:Out 1-1" "system:playback_1"
    aconnect "Fishman TriplePlay":0  MusE:0
    aconnect  MusE:0 "FLUID Synth (qsynth)":0
    
}

#---------------------------------------------------------------------#
#
# Find USB device
#
#---------------------------------------------------------------------#
function FindUSB {
    
    cd /sys/bus/usb/devices
    for f in `ls `
    do
        if [ -f $f/product ]; then
            MyDevice=`cat $f/product`
            if [ "$MyDevice" == "Trackball" ]; then
                echo $f
                if [ $1 == "off" ] ; then
                    echo "0" > /sys/bus/usb/devices/$f/power/state
                else
                    echo "1" > /sys/bus/usb/devices/$f/power/state
                fi
            fi
        fi
    done
}

#---------------------------------------------------------------------#
#
# Set up Music Applications
#
#---------------------------------------------------------------------#
function SetUpApplications {
    
    if test "${SoundSynth}" = "true"; then
        # Launch the Soundfont player.
        echo "Starting qsynth"  >> $LogFile
        nice -15 `QT_STYLE_OVERRIDE=QtCurve qsynth -g 1.0  -o  synth.midi-bank-select=mma` >> $LogFile 2>&1 &
    fi
    
    # Midi Router
    if test "${MidiController}" = "true"; then
        echo "Starting Midi Router"  >> $LogFile
        echo "Starting Midi Router"
        #       cd /home/Dropbox/LiveEffects/
        nice -15 `GTK_THEME=LiveMusicTheme LiveMusicApp -e -v 1 -l $ButtonLayout -j "${AudioOutDevice}"` >> $LogFile 2>&1 &
        #        ./LiveMusicApp -v 6 -l $ButtonLayout -j "${AudioOutDevice}"  >> /home/Dropbox/LiveTest &
    fi
    
    # This is the Guitar effects processor
    if test "${GuitarEffects}" = "true"; then
        echo "Starting Guitar Effects"  >> $LogFile
        #   rakarrack -b $EffectsDir/EliasBankNew.rkrb &
        #        nice -15   ${EffectsProcessorName}  --disable-multi-client --sync -p 7000 >> $LogFile 2>&1 &
        MusicApps.sh EffectsProcessorApp >> $LogFile 2>&1 &
        #   rakarrack -b $EffectsDir/EliasBankNew.rkrb -l $EffectsDir/Elias1.rkr &
        Delay 2
    fi
    
    if test "${Looper}" = "true"; then
        # Set the first Desktop to use.
        #        nice -15 sooperlooper -p 9951 -m ./Prefs/SLMidiF.slb -L ./Prefs/EliasLooper.slsess &
        slgui -L /home/elias/MySongs/Looper/EliasLooper.slsess -P=9951 >> $LogFile &
    fi
    
    if test "${Ardour}" = "true"; then
        # We are going to record
        ardour2 /home/Music/Rehearsals/`date +"%Y%m%d"` &
    fi
    
    if test "${MP3Player}" = "true"; then
        # Set the first Desktop to use.
        QT_STYLE_OVERRIDE=QtCurve clementine &
    fi
    
    if test "${MusePlayer}" = "true"; then
        # Set the first Desktop to use.
        QT_STYLE_OVERRIDE=QtCurve muse &
    fi
    
    if test "${MuseScore}" = "true"; then
        # Set the first Desktop to use.
        QT_STYLE_OVERRIDE=QtCurve musescore3 &
    fi
    
    # External viewer, not used anymore
    if test "${MusicViewer}" = "true"; then
        if test "${Group}" = "fusion"; then
            okular /home/Music/BandStuff/Fusion/FusionBlueCharts.pdf
        else
            konqueror --open-session FusionBlue &
            #         okular /home/Music/BandStuff/Poblano/WebCharts/PoblanoCharts1.pdf
        fi
    fi
    
    # Are we practicing ? then run the sequence
    if test "${Rosegarden}" = "true"; then
        rosegarden &
        Delay 2
    fi
    
    if test "${TabPlayer}" = "true"; then
        tuxguitar &
    fi
    
    # Do we launch the drum machine .
    if test "${Hydrogen}" = "true"; then
        hydrogen -k GMKit -s  /home/elias/MySongs/Drums/JustFunky.h2song &
    fi
    
    Delay 2
    
    jack-plumbing /home/elias/MySongs/Prefs/jack-plumbing >> $LogFile 2>&1 &
    
    # This script check for a failed app
    # and will relaunch it
    if test "${BackroundChecker}" = "true"; then
        KeepLiveMusicRunning.sh "LiveMusicApp" "${EffectsProcessorApp}"  &
    fi
    #  kdialog --progressbar  "Elias Guitar Effects Hints" 0
}

#---------------------------------------------------------------------#
#
# Move apps to correct placement
#
#---------------------------------------------------------------------#
function SetPlacement {
    
    MaxOffSet=1368
    ExtID=`xinput list | grep -Po 'Atmel.*id=\K[0-9]+'`
    xinput map-to-output $ExtID LVDS1
    
    #   ExtID=`xinput list | grep -Po 'ILITEK.*id=\K[0-9]+'`
    #   xinput map-to-output $ExtID HDMI1
    
    # On home PC spread it out
    if [ `hostname` == "Keshie" ]; then
        echo "Keshie"
        AnalogDesktop=4
        LiveMusicAppDesktop=5
        LooperDesktop=$AnalogDesktop
        MidiDesktop=$AnalogDesktop
        PatchageDesktop=7
        PlayerDesktop=7
        DrumDesktop=7
    elif [ `hostname` == "livemusic-ThinkPad-Twist" ]; then
        echo "livemusic-ThinkPad-Twist"
        AnalogDesktop=0
        LiveMusicAppDesktop=1
        LooperDesktop=$AnalogDesktop
        MidiDesktop=$AnalogDesktop
        PatchageDesktop=3
        PlayerDesktop=2
        DrumDesktop=3
    else
        echo "Default PC"
        AnalogDesktop=0
        LiveMusicAppDesktop=1
        PatchageDesktop=3
        PlayerDesktop=2
        LooperDesktop=$AnalogDesktop
        MidiDesktop=$AnalogDesktop
        DrumDesktop=3
    fi
    
    if test "${OneScreeOnly}" = "true"; then
        echo "One screen only "
        AnalogDesktop=7
        LiveMusicAppDesktop=$AnalogDesktop
        PatchageDesktop=$AnalogDesktop
        PlayerDesktop=$AnalogDesktop
        LooperDesktop=$AnalogDesktop
        MidiDesktop=$AnalogDesktop
        DrumDesktop=$AnalogDesktop
        MaxOffSet=1920
    fi
    
    # Check for Digitizer, tells us where we are.
    xinput | grep "ILITEK"
    if [ "$?" = "0" ] ; then
        echo "Found GeChic"
        ExtID=`xinput list | grep -Po 'ILITEK.*id=\K[0-9]+'`
        xinput map-to-output $ExtID HDMI1
        XOffset=0
        YOffset=1080
        NewOffset=`expr $XOffset + 1050`
        MaxOffSet=`expr 1368+1920`
        PlayerDesktop=4
        PatchageDesktop=4
        LooperDesktop=5
        AnalogDesktop=5
        MidiDesktop=5
        SetPlacement1920
    else
        xinput | grep "PixArtImaging"
        if [ "$?" = "0" ] ; then
            echo "Found ViewSonic"
            xrandr --output HDMI1 --mode 1920x1080 --pos 1366x0
            
            ExtID=`xinput list | grep -Po 'PixArtImaging.*id=\K[0-9]+'`
            xinput map-to-output $ExtID HDMI1
            
            XOffset=1370
            NewOffset=`expr $XOffset + 1050`
            MaxOffSet=`expr 1368+1920`
            SetPlacement1920
        else
            SetPlacement1920
            
        fi
    fi
    wmctrl -a $LiveMusicAppDesktop
}

#---------------------------------------------------------------------#
#
# Move apps to correct placement
#
#---------------------------------------------------------------------#
function SetPlacement1920 {
    set -x
    
    echo "1920 Placement Offset  "$XOffset" "$YOffset
    NewOffset=`expr $XOffset + 0`
    wmctrl -r ${EffectsProcessorWM} -t $AnalogDesktop
    wmctrl -r ${EffectsProcessorWM} -e 0,0,0,700,1020
    
    wmctrl -F -r LiveMusicApp_1 -t $LiveMusicAppDesktop
    wmctrl -F -r LiveMusicApp_1 -e 0,0,$YOffset,1855,1050
    
    wmctrl -r SooperLooper -t $LooperDesktop
    wmctrl -r SooperLooper -e 0,850,400,1000,600
    
    wmctrl -r qsynth -e 0,870,0,1000,330
    wmctrl -r qsynth -t $MidiDesktop
    
    #       wmctrl -r clementine -e 0,$NewOffset,350,1000,700
    wmctrl -r clementine -e 0,$XOffset,YOffset,1920,1000
    wmctrl -r clementine -t $PlayerDesktop
    
    NewOffset=`expr $XOffset + 1000`
    wmctrl -r TuxGuitar -t $PlayerDesktop
    wmctrl -r TuxGuitar -e 0,0,0,1920,1000
    
    wmctrl -r Hydrogen -t $DrumDesktop
    wmctrl -r Hydrogen -e 0,0,0,1600,900
    
    wmctrl -r Patchage -t $PatchageDesktop
    wmctrl -r Patchage -e 0,0,0,1700,1000
    
    wmctrl -r ${PatchBayName} -t $PatchageDesktop
    wmctrl -r ${PatchBayName} -e 0,0,0,1700,1000
    set +x
}

#---------------------------------------------------------------------#
#
# Move apps to correct placement
#
#---------------------------------------------------------------------#
function SetPlacement1600 {
    set -x
    
    echo "1600 Placement Offset "$XOffset
    NewOffset=`expr $XOffset + 0`
    wmctrl -r ${EffectsProcessorWM} -e 0,$NewOffset,30,850,650
    wmctrl -r ${EffectsProcessorWM} -t $AnalogDesktop
    
    wmctrl -r LiveMusicApp_1 -e 0,`expr $NewOffset + 550`,10,1340,800
    wmctrl -r LiveMusicApp_1 -t $LiveMusicAppDesktop
    
    wmctrl -r Patchage -e 0,80,10,1200,700
    wmctrl -r Patchage -t $PatchageDesktop
    
    wmctrl -r SooperLooper -e 0,`expr $NewOffset + 900`,475,1000,575
    wmctrl -r SooperLooper -t $LooperDesktop
    
    wmctrl -r qsynth -e 0,80,0,1200,700
    wmctrl -r qsynth -t $MidiDesktop
    
    NewOffset=`expr $XOffset + 0`
    wmctrl -r clementine -e 0,$NewOffset,350,1000,700
    wmctrl -r clementine -t $PlayerDesktop
    
    NewOffset=`expr $XOffset + 1000`
    wmctrl -r TuxGuitar -e 0,$NewOffset,250,900,800
    wmctrl -r TuxGuitar -t $PlayerDesktop
}

#---------------------------------------------------------------------#
#
# Move apps to correct placement
#
#---------------------------------------------------------------------#
function SetPlacement1200 {
    
    echo "1200 Placement Offset "$XOffset
    NewOffset=`expr $XOffset + 0`
    wmctrl -r ${EffectsProcessorWM} -e 1,0,30,850,760
    wmctrl -r ${EffectsProcessorWM} -t $AnalogDesktop
    
    wmctrl -r LiveMusicApp_1 -e 0,0,10,1300,760
    wmctrl -r LiveMusicApp_1 -t $LiveMusicAppDesktop
    
    wmctrl -r Patchage -e 0,80,10,1000,700
    wmctrl -r Patchage -t $PatchageDesktop
    
    wmctrl -r SooperLooper -t $LooperDesktop
    wmctrl -r SooperLooper -e 0,80,0,900,600
    
    wmctrl -r qsynth -e 0,80,0,400,300
    wmctrl -r qsynth -t $MidiDesktop
    
    wmctrl -r clementine -e 1,0,150,1000,600
    wmctrl -r clementine -t $PlayerDesktop
    
    wmctrl -r TuxGuitar -e 0,366,250,1000,500
    wmctrl -r TuxGuitar -t $PlayerDesktop
}

function StopEverything {
    echo "Closing down Effects"
    KillAll KeepLiveMusicRunning.sh
    killall patchage
    killall ${EffectsProcessorName}
    killall qsynth
    killall qjackctl
    killall ardour2
    killall jack-volume
    killall kmetronome
    killall qmidiroute
    killall mididings
    killall guitarix
    killall receivemidi
    killall rosegarden
    killall hydrogen
    
    killall clementine
    killall okular
    killall livedings
    killall jack-volume
    killall ${PatchBay}
    killall ${PatchBay}
    killall LiveMusicApp
    killall sooperlooper
    killall slgui
    killall tuxguitar
    killall smplayer
    KillAll a2jmidid
    killall jackd
    killall jackdbus
    
    killall kmidimon
    killall kdialog
    killall konqueror
    killall smplayer
    killall mplayer
    killall tuxguitar
    kill `ps aux | grep tuxguitar | awk {'print $2'}`
    killall aqualung
    killall mididings
    KillAll a2jmidid
    KillAll gedit
    
    
    KillAll jackd
    killall jack-plumbing
    killall jackd
    killall jack-plumbing
    killall jackd
    killall jackd
    killall jack-plumbing
    killall jackd
    killall jack-plumbing
    killall jackd
    killall jack-plumbing
    killall jackd
    killall jack-plumbing
    killall jackd
    KillAll ${PatchBay}
    KillAll a2jmidid
    KillAll musescore
    sleep 3
    KillAll guitarix
    killall jack-plumbing
    xset s on
    xset +dpms
    killall GuitarEffects
    FAHClient --send-unpause "LiveMusicApp_Done"
    
    exit 0
}

#---------------------------------------------------------------------#
#
# Main, start of script
#
#---------------------------------------------------------------------#
# set -x
#

echo "Line "$1
# Set Default values
GuitarEffects=true
EffectsProcessorName="Guitarix"
EffectsProcessorApp="guitarixOld"
EffectsProcessorWM="Guitarix: gx_head"
# PatchBay="carla"
PatchBay="catia"
PatchBayName="Catia"

MidiController=true
Rosegarden=false
Hydrogen=false
Ardour=false
MP3Player=false
MusePlayer=false
MuseScore=false
Looper=false
MusicViewer=false
LogFile=~/.config/LiveMusicApp/LogGuitar.txt
#LogFile=/dev/tty
JackFile=LogJack
TabPlayer=false
XOffset=0
JamStik=false
ButtonLayout=1
OneScreeOnly=false
BackroundChecker=true
SoundSynth=true

xinput set-prop --type=int --format=32 17 "Evdev Axis Calibration" 0 5464 0 4050
# sudo echo 5 > /proc/sys/vm/swappiness
# sudo echo -n performance | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor

# Right of
# xinput set-prop --type=int --format=32 17 "Evdev Axis Calibration" -5500 4100 0 4100

# Exec=env WINEPREFIX="/home/elias/.wine64" wine64 MIDIGuitar2-64bit.exe
echo "----------------------------------------------------------------------" >> $LogFile
echo `date` >> $LogFile
echo "----------------------------------------------------------------------" >> $LogFile
# Parse command line options.
while getopts "abcdegfhrpmnovlswt" OPT; do
    echo "hello "$OPT
    case "$OPT" in
        h)
            echo "
        a - Ardour
        b - Adjust Placement
        c - Make Connections
        d - Drum Machine
        e - Launcher Execute
        g - Generate Charts
        j - JamStik
        l - Looper
        m - Music Player
        n - Muse Player
        o - Muse Score
        p - PFD viewer
        r - Rosegarden
        s - Stop everything
        t - Tab Editor
        v - version
            w - Working Scoring"
            exit 0
        ;;
        v)
            echo "`basename $0` version 6.7"
            echo "2019-31-03"
            exit 0
        ;;
        a)
            echo "Ardour2"
            Ardour=true
        ;;
        b)
            SetPlacement
            exit 0
        ;;
        c)
            #            FindDevice
            #            SetDefinitions
            SetUpConnections
            exit 0
        ;;
        d)
            echo "Drum Machine"
            Hydrogen=true
        ;;
        e)
            
            # if the script is called
            # twice exit.
            pid=`pgrep jackd`
            if [ -z $pid ]
            then
                echo "GuitarEffects Auto 1"
            else
                echo "GuitarEffects Auto 2"
            fi
            
            
            pid=`pgrep LiveMusicApp`
            if [ -z $pid ]
            then
                MP3Player=true
                Rosegarden=false
                MidiController=true
                GuitarEffects=true
                BackroundChecker=true
                SoundSynth=true
            else
                StopEverything
            fi
        ;;
        
        f)
            echo "Test"
            Rosegarden=false
            MidiController=true
            GuitarEffects=false
            MusicViewer=false
            OneScreeOnly=true
            TabPlayer=false
            Looper=true
            Hydrogen=true
            BackroundChecker=false
            MP3Player=false
            SoundSynth=true
        ;;
        g)
            # LiveMusicReplacePDF.py /home/elias/MySongs/FusionBlue/
            LiveMusicCharts.py /home/elias/MySongs/FusionBlue/ -f -c -i -r
        ;;
        j)
            echo "JamStik"
            JamStik=true
        ;;
        l)
            echo "Looper"
            Looper=true
        ;;
        m)
            echo "MP3 Player"
            MP3Player=true
        ;;
        n)
            echo "Muse"
            MusePlayer=true
        ;;
        o)
            echo "Muse Score"
            MuseScore=true
        ;;
        
        r)
            echo "Rosegarden"
            Rosegarden=true
        ;;
        t)
            echo "Tab Player"
            TabPlayer=true
        ;;
        l)
            echo "Looper"
            Looper=true
        ;;
        p)
            echo "PDF"
            MusicViewer=true
        ;;
        w)
            echo "PDF"
            Rosegarden=true
            MidiController=false
            GuitarEffects=false
            MusicViewer=false
        ;;
        s)
            StopEverything
            exit 0
        ;;
        o)
            Group=$OPTARG
        ;;
        ?)
            # getopts issues an error message
            echo $USAGE >&2
            exit 1
        ;;
    esac
done

RunCount=`pgrep -c LivrMusicApp `
if [ RunCount -gt 1 ]; then
    echo "********** Multiple Version running, killing."
    exit 1
fi

#  the computer from screen saving.
xset s off
xset -dpms
qdbus org.freedesktop.ScreenSaver /ScreenSaver Inhibit NULL NULL
qdbus org.freedesktop.ScreenSaver /ScreenSaver SetActive false
FAHClient --send-pause "LiveMusicApp_Running"
killall receivemidi

# Remove the switches we parsed above.
shift `expr $OPTIND - 1`

# Access additional arguments as usual through
# variables $@, $*, $1, $2, etc. or using this loop:
for PARAM; do
    echo $PARAM
done

date  > $LogFile
export IAM=`whoami`

# cpupower frequency-info

# Try and find what device we should use.
FindDevice

echo -n "System Timer "
cat /sys/devices/system/clocksource/clocksource0/current_clocksource

echo -n "Timer Speed "
cat /sys/class/rtc/rtc0/max_user_freq

GXSize=`wc -c /home/elias/.config/guitarix/gx_head_rc | awk '{print $1}'`
if [ $GXSize -ge 150000 ];
then
    zenity --warning \
    --text=" gx_head_rc too large "$GXSize
    # The end (connections) of the gx_head_rc file get's large.
    # jack_connections remove.
fi

# Set the definitions for the functions.
SetDefinitions

# Start up Jack
StartJack

# If at first you don't succeed ....
if [ `ps -ew | grep -c jackd` == 0 ] ; then
    StartJack
fi

if [ `ps -ew | grep -c jackd` == 0 ] ; then
    zenity --warning \
    --text=" Can\'t Start Jack"
    exit 1
fi

# If jackd is still not running then exit.
if [ `ps -ew|grep -c jackd` == 0 ] ; then
    echo "Exiting, could not launch Sound System"  >> $LogFile
    exit 1
fi

echo "***************** Starting SetUpApplications"
# Set up the other applications.
Delay 1
# a2jmidid -e > $LogFile 2>&1 &
a2jmidid > $LogFile 2>&1 &

SetUpApplications
Delay 1

echo "***************** Starting SetUpConnections"
# Set up the mixer levels and the interconnection between devices.
SetUpConnections

echo "***************** Starting SetPlacement"
# Put apps in the right place/desktop
SetPlacement
sleep 3

# Set up the mier levels and the interconnection between devices.
SetUpConnections
# Put apps in the right place/desktop
SetPlacement

sleep 3

# Set up the mier levels and the interconnection between devices.
SetUpConnections
# Put apps in the right place/desktop
SetPlacement

sleep 8

# Set up the mixer levels and the interconnection between devices.
SetUpConnections
# Put apps in the right place/desktop
SetPlacement

exit 0

# Check for file size on this:
# /home/elias/.config/guitarix/gx_head_rc
#
# lsp-plugins-loud-comp-mono -c /home/elias/LoudCompensation.cfg
#
