#!/bin/bash
#-------------------------------------------
#
#   File:   GuitarEffects
#
#   Contains:   This file starts up the live performance as well as practice
#       applications and automatically configures them.
#
#
#   Written By:     Elias Keshishoglou on Thu Jun 25 20:49:03 PDT 2009
#
#   Copyright :    2009-2021 Elias Keshishoglou all rights reserved.
#
#
#-------------------------------------------#

function Delay {
    echo "Delay "`expr $1 \* 3`" "$1
    sleep `expr $1 \* 2`
}

#-------------------------------------------#
#
# Set the Definitions
#
#-------------------------------------------#
function SetDefinitions {
    # This is the midi router for converting Program Change
    RouterNameIn="LiveMusic"
    RouterNameOut="LiveMusic"
    DrumNameIn="Hydrogen"
    DrumNameOut="Hydrogen"
    
    # Piano connections
    #   KeyBoardMidi="UX16"
    #   PedalBoardIn="Uno"
    KeyBoardMidi="Uno"
    
    Sequencer="rosegarden"
    
    echo "Audio Interface is: " ${AudioInDevice}  >> $LogFile
    # Get the port numbers of the interface
    AudioInHW=`arecord -l | grep -m 1 "${AudioInDevice}" | awk '{ print $2}' | cut -d":" -f1`
    AudioOutHW=`arecord -l | grep -m 1 "${AudioOutDevice}" | awk '{ print $2}' | cut -d":" -f1`
    
    # Record file name is based on date.
    export RecordFileName=/home/Music/Rehearsals/`date +"%Y%m%d"`
    
    #   if [ ! -d "$RecordFileName" ]; then
    #       echo -e "\nCreating \"$RecordFileName\"\n"
    #       cp -r /home/Music/Rehearsals/Template $RecordFileName
    #   fi
}


#-------------------------------------------#
#
# Startup Set Up Connections
#
#-------------------------------------------#
function SetUpConnections {
    EffectsConnect.sh
    return
    # ********************************
    # **** Alsa sound if no USB interface
    # ********************************
    
    # Turn on Line input as source.
    #   amixer cset numid=8,iface=MIXER,name='Input Source' 0
    
    # Turn on the Headphone output
    #    amixer cset numid=6,iface=MIXER,name='Headphone Playback Switch' 1
    
    # Turn on the Master output
    #    amixer cset numid=10,iface=MIXER,name='Master Playback Switch' 1
    
    # Set the input mode to be a line level signal not a mic.
    #    amixer cset numid=5,iface=MIXER,name='Mic Jack Mode' 1
    
    #   amixer sset "Mic Boost" 0
    #   amixer sset "Capture" 70
    #   amixer cset name='Capture Switch' 2
    
    # Max out the USB Device.
    #    amixer -c 1 sset 'PCM' 128
    

    amixer -c 0 sset 'Speaker' mute
    amixer -c 1 sset 'Speaker' mute
    amixer -c 0 sset 'Speaker' 0
    amixer -c 1 sset 'Speaker' 0
    
    #    amixer sset 'Master' 65535
    #    amixer sset 'Master' 65%
    # ********************************
    # **** Definitions
    # ********************************
    MainOut1="jack-volume:input_1"
    MainOut2="jack-volume:input_2"
    MainOut3="jack-volume:input_3"
    MainOut4="jack-volume:input_4"
    MainOut5="jack-volume:input_5"
    
    PedalBoardName="EliasPedal3"
    KeyBoardMidi="Uno"
    MidiGuitarMidi="LiveMusic"
    
    # ********************************
    # **** Alsa midi connections
    # ********************************
    aconnect "TriplePlay Connect":"0" "LiveMidi":2
    aconnect "Fishman TriplePlay":"0" "LiveMidi":2
    
    # for Keyboard
    aconnect "USB Uno MIDI Interface":"0" "LiveMidi":2
    
    # Pedal Versions
    aconnect "EliasPedal3":"0" "LiveMusic":"0"
    aconnect "EliasGuitar":"0" "LiveMusic":"0"
    aconnect "EliasMidi":"0" "LiveMusic":"0"
    aconnect "LPD8":"0" "LiveDAW":"1"
    aconnect "XTONE":"0" "LiveMusic":"0"

    # Midi
    aconnect "LiveMusic Output":"0" "FLUID Synth (qsynth)":"0"
    # Metronome
    aconnect "LiveMusic Output":"5" "FLUID Synth (qsynth)":"0"
    # Drum Looper
    aconnect "LiveMusic Output":"8" "FLUID Synth (qsynth)":"0"
    
    # Temp control for sooper
    aconnect "LiveMusic Output":"2" "sooperlooper":"0"
    
    # TO Pedalboard
    aconnect "LiveMusic Output":"6" "EliasPedal3":"0"
    # To Guitar Controller
    aconnect "LiveMusic Output":"6" "EliasGuitar":"0"
    aconnect "LiveMusic Output":"6" "EliasMidi":"0"
    # To KorgNano
    aconnect "LiveMusic Output":"7" "LPD8":"0"
    aconnect "LiveMusic Output":"7" "nanoKONTROL2":"0"
    aconnect "LiveMusic Output":"6" "NMSVE":"0"
    aconnect "LiveMusic Output":"7" "Reloop KeyFadr":"0"
    
    
    aconnect "Midi Through":"0" "FLUID Synth (qsynth)":"0"
    aconnect "Reloop KeyFadr":"0" "LiveDAW":"1"
    aconnect "nanoKONTROL2":"0" "LiveDAW":"1"
    aconnect "NMSVE":"0" "LiveMusic":"0"
    aconnect "Fishman TriplePlay":0 "MusE":0
    
    
    aconnect -d "Fishman TriplePlay":"0" "FLUID Synth (qsynth)":"0"
    aconnect -d "Fishman TriplePlay":"1" "FLUID Synth (qsynth)":"0"
    aconnect -d "TriplePlay Connect":"0" "FLUID Synth (qsynth)":"0"
    aconnect -d "TriplePlay Connect":"1" "FLUID Synth (qsynth)":"0"
    aconnect -d "EliasGuitar":"0" "FLUID Synth (qsynth)":"0"
    aconnect -d "System":"1" "FLUID Synth (qsynth)":"0"
    aconnect -d "Midi Through":"1" "FLUID Synth (qsynth)":"0"
    aconnect -d "Midi Through":"2" "FLUID Synth (qsynth)":"0"
    aconnect -d "Midi Through":"3" "FLUID Synth (qsynth)":"0"
    aconnect -d "nanoKONTROL2":"0" "FLUID Synth (qsynth)":"0"
    aconnect -d "sooperlooper":"0" "FLUID Synth (qsynth)":"0"

    # ********************************
    # **** Jack audio and midi connections
    # ********************************
    # To find devices
    # jack_lsp -c
    
    # Midi Sound generato
    MidiSoundOut=`jack_lsp -c |  grep "FLUID" | tail -1`
 
    
    # Muse Connection
    aconnect "Fishman TriplePlay":0  MusE:0
    aconnect "MusE":0 "FLUID Synth":0
    ${PipeStart} jack_connect "MusE:Out 1-0" "system:playback_1"
    ${PipeStart} jack_connect "MusE:Out 1-1" "system:playback_1"
    

    
    ${PipeStart} jack_connect "Midi-Bridge:LiveMusic Output:(capture_8) DRLoop" "Midi-Bridge:sooperlooper:(playback_0) sooperlooper"

    # Connect Carla Mixer to Main
    ${PipeStart} jack_connect "Carla:LSP Mixer x4 Stereo:Output L" system:playback_1
    ${PipeStart} jack_connect "Carla:LSP Mixer x4 Stereo:Output R" system:playback_2


    # Connect Jack_Volume to Main
    ${PipeStart} jack_connect jack-volume:output_1 system:playback_1
    ${PipeStart} jack_connect jack-volume:output_1 system:playback_2
    ${PipeStart} jack_connect jack-volume:output_2 system:playback_1
    ${PipeStart} jack_connect jack-volume:output_2 system:playback_2
    ${PipeStart} jack_connect jack-volume:output_3 system:playback_1
    ${PipeStart} jack_connect jack-volume:output_3 system:playback_2
    ${PipeStart} jack_connect jack-volume:output_4 system:playback_1
    ${PipeStart} jack_connect jack-volume:output_4 system:playback_2
    
    # pw-jack jack_connect "J3Sink Audio/Sink sink:playback_FL"  "clementine:out_pipeline-2-jackaudiosink_1"
    
    # Guitar in goes to effects Rack
    
    if [ $MainInputPort == 2 ]; then
        
        echo "jack_connect system:capture_1 gx_head_amp:in_1"
        #    jack_connect system:capture_1 gx_head_amp:in_0
        ${PipeStart} jack_connect system:capture_2 gx_head_amp:in_0
        ${PipeStart} jack_connect system:capture_1 system:playback_1
        ${PipeStart} jack_connect system:capture_1 system:playback_2
        ${PipeStart} jack_disconnect system:capture_2 system:playback_2
        ${PipeStart} jack_disconnect system:capture_2 system:playback_1
    else
        ${PipeStart} jack_connect system:capture_1 gx_head_amp:in_0
        ${PipeStart} jack_connect system:capture_2 system:playback_1
        ${PipeStart} jack_connect system:capture_2 system:playback_2
        ${PipeStart} jack_disconnect system:capture_1 system:playback_2
        ${PipeStart} jack_disconnect system:capture_1 system:playback_1
        
    fi
    
    echo "Guitarix Audio to Jack Volume"
    ${PipeStart} jack_connect gx_head_fx:out_0 $MainOut1
    ${PipeStart} jack_connect gx_head_fx:out_1 $MainOut5
    ${PipeStart} jack_disconnect gx_head_fx:out_1 system:playback_1
    ${PipeStart} jack_disconnect gx_head_fx:out_0 system:playback_2
    
    #    jack_connect gx_head_fx:out_0 loud_comp_mono:in
    #    jack_connect gx_head_fx:out_1 loud_comp_mono:in
    #    jack_connect loud_comp_mono:out $MainOut1
    
    
    # Connect Guitarix out to looper in
    ${PipeStart} jack_connect gx_head_fx:out_1 sooperlooper:common_in_1
    #   jack_connect gx_head_fx:out_2 sooperlooper:common_in_2
    
    # Connect the Looper to the main outputs
    ${PipeStart} jack_connect sooperlooper:common_out_1 $MainOut4
    ${PipeStart} jack_connect sooperlooper:common_out_1 $MainOut4
    ${PipeStart} jack_connect sooperlooper:common_out_2 $MainOut4
    ${PipeStart} jack_connect sooperlooper:common_out_2 $MainOut4
    
    # Soundfont player get connected to the Main playback device.
    ${PipeStart} jack_connect qsynth:left jack-volume:input_2
    ${PipeStart} jack_connect qsynth:right jack-volume:input_2
    ${PipeStart} jack_disconnect qsynth:left system:playback_1
    ${PipeStart} jack_disconnect qsynth:right system:playback_2
    
    # Connect qsynth to the Looper.
    ${PipeStart} jack_connect qsynth:left sooperlooper:common_in_1
    ${PipeStart} jack_connect qsynth:left sooperlooper:common_in_2
    
    # Drum Machine
    ${PipeStart} jack_connect Hydrogen:out_L sooperlooper:common_in_1
    ${PipeStart} jack_connect Hydrogen:out_R sooperlooper:common_in_2
    ${PipeStart} jack_connect Hydrogen:out_L $MainOut2
    ${PipeStart} jack_connect Hydrogen:out_R $MainOut2
    
    ${PipeStart} jack_connect clementine:out_jackaudiosink-1_1 $MainOut3
    ${PipeStart} jack_connect clementine:out_jackaudiosink-1_1 $MainOut3
    
    ${PipeStart} jack_connect Guitarix:out_1 "ardour:Audio 1/in 1"
    ${PipeStart} jack_connect gx_head_fx:out_1 "ardour:Audio 1/in 1"
    aconnect "LiveMusic Output":1 GuitBridge:0
#    ${PipeStart} jack_connect "GuitBridge:capture" gx_head_amp:midi_in_1

    ${PipeStart} jack_connect "Midi-Bridge:LiveMusic Output:(capture_1) Guitarix"  gx_head_amp:midi_in_1
    ${PipeStart} jack_connect "Midi-Bridge:LiveMusic Output:(capture_1) Guitarix" Carla:events-in
     
    #    aconnect "TriplePlay Connect":0 MuseBridge:0
    #    aconnect "Fishman TriplePlay":0  MuseBridge:0
    #    jack_connect "MuseBridge:capture" mscore:mscore-midiin-1
    # Transport out
    #    aconnect "LiveMusic Output":3 Mamba:input
    
    # Tempo out
    #   aconnect "LiveMusic Output":4 Mamba:input
    
    #   jack_connect "Mamba:out" "a2j:FLUID Synth (qsynth) (playback): Synth input port (qsynth:0)"    # jack_connect "Mamba:out" "MambaBridge:playback"
    # aconnect MambaBridge:capture "FLUID Synth":0
}

#-------------------------------------------#
#
# Set up Music Applications
#
#-------------------------------------------#
function SetUpApplications {
    echo "SetupApplications" | tee $LogFile
    if test "${SoundSynth}" = "true"; then
        # Launch the Soundfont player.
        echo "Starting PipeStart "$PipeStart | tee $LogFile
        nice -15 $PipeStart `QT_STYLE_OVERRIDE=QtCurve ${PipeStart} qsynth -g 1.0  -o  synth.midi-bank-select=mma` >> $LogFile 2>&1 &
    fi
    
    # Midi Router
    if test "${MidiController}" = "true"; then
        echo "Starting Midi Router"  | tee $LogFile
        echo "Pipewire option "$PipeOption" ButtonSize "$ButtonSizes   | tee $LogFile
        echo "Button "$ButtonLayout" AudioOut "$AudioOutDevice  | tee $LogFile
        MusicApps.sh LiveMusicApp
    fi
    
    # This is the Guitar effects processor
    if test "${GuitarEffects}" = "true"; then
        echo "Starting Guitar Effects"  | tee $LogFile
        MusicApps.sh EffectsProcessorApp >> $LogFile 2>&1 &
        #   rakarrack -b $EffectsDir/EliasBankNew.rkrb -l $EffectsDir/Elias1.rkr &
        Delay 1
        MusicApps.sh CarlaPost >> $LogFile 2>&1 &
    fi

    if test "${VSTGuitarEffects}" = "true"; then
        echo "Starting Guitar Effects" | tee $LogFile
    
        MusicApps.sh CarlaGuitar >> $LogFile 2>&1 &

      #  QT_SCREEN_SCALE_FACTORS=1.75 nice -18 $PipeStart carla-jack-multi --cnprefix "LveMus" /home/MySongs/CarlaConfig/NewCarlaTest1.carxp &
        
#        /home/MySongs/CarlaConfig/Guitarix_Jazz_Rack.carxp  &
        Delay 2
        CarlaSwitcher.py &  
    fi
    
    if test "${RunPlugins}" = "true"; then
        echo "Plugins Effects" | tee $LogFile
#        QT_SCREEN_SCALE_FACTORS=1.25 \ nice -18 $PipeStart \ carla-jack-multi /home/MySongs/CarlaConfig/EliasCarla.carxp &
    fi
    
    if test "${InternetJamStart}" = "true"; then
        # Internet
        $InternetJam -l /home/MySongs/Prefs/sonobus_elias.sonobus &
    fi
    
    if test "${Ardour}" = "true"; then
        # We are going to record
        $PipeStart ardour /home/Music/Rehearsals/`date +"%Y%m%d"` &
    fi
    
    if test "${MP3Player}" = "true"; then
        # Set the first Desktop to use.
        #       QT_STYLE_OVERRIDE=QtCurve  $PipeStart clementine &
        echo "Starting clementine "$PipeStart  | tee $LogFile
        $PipeStart clementine &
    fi
    
    if test "${MusePlayer}" = "true"; then
        # Set the first Desktop to use.
        MusicApps.sh MidPlay >> $LogFile 2>&1 & 
        #       QT_STFslguiYLE_OVERRIDE=QtCurve muse &
    fi
    
    if test "${MuseScore}" = "true"; then
        # Set the first Desktop to use.
        MusicApps.sh Score >> $LogFile 2>&1 &
        #        QT_STYLE_OVERRIDE=QtCurve musescore3 &
    fi
    
    # External viewer, not used anymore
    if test "${MusicViewer}" = "true"; then
        if test "${Group}" = "fusion"; then
            okular /home/Music/BandStuff/Fusion/FusionBlueCharts.pdf
        else
            konqueror --open-session FusionBlue &
            #         okular /home/Music/BandStuff/Poblano/WebCharts/PoblanoCharts1.pdf
        fi
    fi
    
    # Are we practicing ? then run the sequence
    if test "${Rosegarden}" = "true"; then
        $PipeStart rosegarden &
        Delay 2
    fi
    
    # Do we launch the drum machine .
    if test "${Hydrogen}" = "true"; then
        $PipeStart hydrogen -k GMKit -s  /home/elias/MySongs/Drums/JustFunky.h2song &
    fi
    
    # mamba /home/Music/MidiFiles/MidiLoops/funk4.mid &
    
    Delay 2
    if test "${Looper}" = "true"; then
        # Set the first Desktop to use.
        MusicApps.sh "Looper" >> $LogFile 2>&1 &
    fi

#    ${PatchBay} --activated /home/MySongs/Prefs/PatchbayElias.qpwgraph > $LogFile 2>&1 &
    raysession --start-session /home/MySongs/Prefs/RaySessionLiveMusic &
#    ${PatchBay} > $LogFile 2>&1 &
    Delay 1   
    
    # This script check for a failed app
    # and will relaunch it
    if test "${BackroundChecker}" = "true"; then
        KeepLiveMusicRunning.sh "LiveMusicApp" "${EffectsProcessorApp}"  $UsePipeWire &
    fi
}

#-------------------------------------------#
#
# Move apps to correct placement
#
#-------------------------------------------#
function SetPlacement {
    set -x
    YOffset=0
    MaxOffSet=1368
    ExtID=`xinput list | grep -Po 'Atmel.*id=\K[0-9]+'`
    xinput map-to-output $ExtID LVDS1
    
    #   ExtID=`xinput list | grep -Po 'ILITEK.*id=\K[0-9]+'`
    #   xinput map-to-output $ExtID HDMI1
    
    ExtraMonitor=`xrandr | grep " connected" | wc -l`
    
    # On home PC spread it out
    if [ `hostname` == "Keshie" ] ||
    [ `hostname` == "KeshT16" ] ||
    [ `hostname` == "KeshG31" ] ||
    [ `hostname` == "KeshG32" ] ||
    [ `hostname` == "KeshP15" ]; then
        echo "Keshie"
        AnalogDesktop=2
        LiveMusicAppDesktop=2
        CarlaDesktop=2
        LooperDesktop=2
        MidiDesktop=3
        PatchageDesktop=7
        PlayerDesktop=7
        DrumDesktop=7
        YOffset=1080
        YOffset=900
        
        if [ "$ExtraMonitor" -eq "1" ]; then
            YOffset=0
            ExMonitor=0
            echo "External Monitor Not Found"
        else
            echo "External Monitor Found"
            ExMonitor=1
        fi
        SetPlacement1920

    elif [ `hostname` == "LiveMusic" ]; then
        echo "Music"
        AnalogDesktop=0
        LiveMusicAppDesktop=1
        LooperDesktop=$AnalogDesktop
        MidiDesktop=$AnalogDesktop
        PatchageDesktop=3
        PlayerDesktop=2
        DrumDesktop=3
        YOffset=0
        CarlaDesktop=5
    else
        echo "Default PC"
        AnalogDesktop=0
        LiveMusicAppDesktop=1
        PatchageDesktop=7
        PlayerDesktop=2
        LooperDesktop=$AnalogDesktop
        MidiDesktop=$AnalogDesktop
        DrumDesktop=3
        CarlaDesktop=$LiveMusicAppDesktop
       SetPlacement1920
    fi
    
    if test "${OneScreeOnly}" = "true"; then
        echo "One screen only "
        AnalogDesktop=7
        LiveMusicAppDesktop=$AnalogDesktop
        PatchageDesktop=$AnalogDesktop
        PlayerDesktop=$AnalogDesktop
        LooperDesktop=$AnalogDesktop
        MidiDesktop=$AnalogDesktop
        DrumDesktop=$AnalogDesktop
        MaxOffSet=1920
        SetPlacement1920
    fi
    
    wmctrl -s $LiveMusicAppDesktop

}

#-------------------------------------------#
#
# Move apps to correct placement
#
#-------------------------------------------#
function SetPlacement1920 {
    set -x

    echo "1920 Placement Offset  "$XOffset" "$YOffset
    NewOffset=`expr $XOffset + 0`
    if [ "$ExMonitor" -eq "1" ]; then
        
        wmctrl -r ${EffectsProcessorWM} -t $AnalogDesktop
        #       wmctrl -r ${EffectsProcessorWM} -e 0,600,0,700,860
        wmctrl -r ${EffectsProcessorWM} -e 0,3650,700,800,1050
        
        wmctrl -F -r LiveMusicApp_1 -t $LiveMusicAppDesktop
        
        wmctrl -r LiveMusicApp_1 -e 0,90,0,2200,1000

#      wmctrl -F -r LiveMusicApp_1 -e 0,200,0,2250,1300
        wmctrl -r LiveMusicApp_1 -b add,maximized_vert
        
        wmctrl -r Carla -t $CarlaDesktop
        wmctrl -r Carla -e 0,2415,410,1200,1800
    
        
        wmctrl -r SooperLooper -t $LooperDesktop
        wmctrl -r SooperLooper -e 0,3650,1000,1000,650
        
        wmctrl -r qsynth -e 0,640,80,1600,400
        wmctrl -r qsynth -t $MidiDesktop
    else
        wmctrl -r ${EffectsProcessorWM} -t $AnalogDesktop
        wmctrl -r ${EffectsProcessorWM} -e 0,0,0,700,1350
        
        wmctrl -F -r LiveMusicApp_1 -t $LiveMusicAppDesktop
        #    wmctrl -F -r LiveMusicApp_1 -e 0,0,$YOffset,1850,1050
        wmctrl -F -r LiveMusicApp_1 -e 0,90,0,2300,1350
        
        wmctrl -r SooperLooper -t $LooperDesktop
        wmctrl -r SooperLooper -e 0,1350,420,1100,400
        
        wmctrl -r qsynth -e 0,1450,80,1400,400
        wmctrl -r qsynth -t $MidiDesktop

        wmctrl -r Carla -t $CarlaDesktop
        wmctrl -r Carla -e 0,60,0,1900,1200
    fi
    
    #       wmctrl -r clementine -e 0,$NewOffset,350,1000,700
    wmctrl -r clementine -e 0,$XOffset,0,1920,1000
    wmctrl -r clementine -t $PlayerDesktop
    
    NewOffset=`expr $XOffset + 1000`
    wmctrl -r TuxGuitar -t $PlayerDesktop
    wmctrl -r TuxGuitar -e 0,0,0,1920,1000
    
    wmctrl -r Hydrogen -t $DrumDesktop
    wmctrl -r Hydrogen -e 0,0,0,1600,900
    
    wmctrl -r Patchage -t $PatchageDesktop
    wmctrl -r Patchage -e 0,0,0,1700,1000
    
    wmctrl -r ${PatchBayName} -t $PatchageDesktop
    wmctrl -r ${PatchBayName} -e 0,0,0,1200,850
    
    wmctrl -r "Carla " -t $CarlaDesktop

    wmctrl -r QjackCtl -e 0,640,80,600,125
    wmctrl -r "Graph — QjackCtl" -e 0,0,940,1800,1000
    wmctrl -r QjackCtl -t $MidiDesktop
    set +x
}

#-------------------------------------------#
#
# StopEverything
#
#-------------------------------------------#
function StopEverything {
    echo "Closing down Effects"  | tee $LogFile
    
    killall KeepLiveMusicRunning.sh
    killall KeepLiveMusicRunning.sh
    
    # of you kill guitarix it doesn't save state.
    wmctrl -c guitarix
    wmctrl -c SooperLooper
    wmctrl -c LiveMusicApp_1
    wmctrl -c qsynth
    wmctrl -c clementine
    wmctrl -c qpwgraph
    
    wmctrl -c ${EffectsProcessorWM}
    wmctrl -c LiveMusicApp_1
    wmctrl -c Patchage
    wmctrl -c SooperLooper
    wmctrl -c qsynth
    wmctrl -c clementine
    wmctrl -c QjackCtl
    
    sleep 1
    KillAll CarlaSwitcher.py
    KillAll guitarix
    killall patchage
    killall -I ${EffectsProcessorName}
    killall qsynth
    killall ardour2
    killall jack-volume
    killall kmetronome
    killall qmidiroute
    killall mididings
    killall guitarix
    killall receivemidi
    killall rosegarden
    killall hydrogen
    killall qsynth
    killall clementine
    killall okular
    killall livedings
    killall jack-volume
    killall LiveMusicApp
    killall sooperlooper
    killall slgui
    killall tuxguitar
    killall smplayer
    killall a2jmidid
    killall $InternetJam
    KillAll CarlaSwitcher.py
    
    killall kmidimon
    killall kdialog
    killall konqueror
    killall smplayer
    killall mplayer
    killall tuxguitar
    killall aqualung
    killall mididings
    killall a2jmidi_bridge
    killall gedit
    killall $InternetJam
    KillAll CarlaSwitcher.py
        
    killall -I ${EffectsProcessorName}
    killall ${PatchBay}
    KillAll catia
    killall a2jmidi_bridge
    killall guitarix
    #    FAHClient --send-unpause "LiveMusicApp_Done"
    
    #    if test "${KillJackOnExit}" = "true"; then
    echo "Killing Jack"
    killall jack-plumbing
    killall qjackctl
    KillAll jackd
    KillAll jack
    killall jackdbus
    sleep 3
    killall jack-plumbing
    killall qjackctl
    KillAll jackd
    killall jackdbus
    #    fi
    xset s on
    xset +dpms
    powerprofilesctl set balanced

    exit 0
}

#-------------------------------------------#
#
# Main, start of script
#
#-------------------------------------------#
set -x

echo "Line "$1  | tee $LogFile
# Set Default values
GuitarEffects=false
VSTGuitarEffects=true
EffectsProcessorName="Carla"
#EffectsProcessorName="Guitarix"
EffectsProcessorApp="CarlaGuitar"
EffectsProcessorWM="Guitarix: gx_head"

EffectsProcessorWM="Carla"
# PatchBay="carla"
PatchBay="qpwgraph"
PatchBayName="qpwgraph"
# PatchBay="raysession"
PatchBay="raysession"
PatchBayName="raysession"
InternetJam="sonobus"

RunPlugins=true
MidiController=true
Rosegarden=false
Hydrogen=false
Ardour=false
MP3Player=false
MusePlayer=false
MuseScore=false
Looper=false
MusicViewer=false
WeAreDebugging=false
KillJackOnExit=true
#LogFile=~/.config/LiveMusicApp/LogGuitar.txt
LogFile=/dev/stdout
# 2>&1 | tee outfile
# JackFile=LogJack
TabPlayer=false
XOffset=0
JamStik=false
ButtonLayout=1
OneScreeOnly=false
BackroundChecker=true
InternetJamStart=false
SoundSynth=true
Version="2.2.2"

powerprofilesctl set performance
xinput set-prop --type=int --format=32 17 "Evdev Axis Calibration" 0 5464 0 4050

echo "--------------------------------------------"  | tee $LogFile
echo `date`  | tee $LogFile
echo $PATH  | tee $LogFile
echo "--------------------------------------------"  | tee $LogFile

# Parse command line options.
while getopts "abcdefgijkhrpmnovlqsuwtx" OPT; do
    #    echo "hello "$OPT
    case "$OPT" in
        h)
            echo "
        a - Ardour
        b - Adjust Placement
        c - Make Connections
        d - Drum Machine
        e - Launcher Execute
        g - Generate Charts
        i - Internet
        j - JamStik
        k - Debugging
        l - Looper
        m - Music Player
        n - Muse Player
        o - Muse Score
        p - PFD viewer
        q - Guitar Sound Test
        r - Rosegarden
        s - Stop everything
        t - Tab Editor
        u - Carla Test
        v - version
        w - Working Scoring
        x - Kill Pipewire"
            exit 0
        ;;
        v)
            echo "`basename $0` "$Version
            echo "2019-31-03"
            exit 0
        ;;
        a)
            echo "Ardour2"
            Ardour=true
        ;;
        b)
            SetPlacement
            exit 0
        ;;
        c)
            #            FindDevice
            #            SetDefinitions
            SetUpConnections
            exit 0
        ;;
        d)
            echo "Drum Machine"
            Hydrogen=true
        ;;
        e)
            # if the script is called
            # twice exit.
            LogFile=~/.config/LiveMusicApp/LogGuitar.txt
            
            #       echo $PATH >> $LogFile
            #       exit 0
            pid=`pgrep LiveMusicApp`
            if [ -z $pid ]
            then
                echo "GuitarEffects Auto 1"
            else
                StopEverything
            fi
            
            pid=`pgrep LiveMusicApp`
            if [ -z $pid ]
            then
                MP3Player=true
                MidiController=true
                GuitarEffects=true
                VSTGuitarEffects=false
                BackroundChecker=true
                SoundSynth=true
                Looper=true
                #                Hydrogen=true
            else
                StopEverything
            fi
        ;;
        
        f)
            echo "Test"
            Rosegarden=false
            MidiController=true
            GuitarEffects=false
            VSTGuitarEffects=false
            MusicViewer=false
            OneScreeOnly=true
            TabPlayer=false
            Looper=true
            Hydrogen=true
            BackroundChecker=false
            MP3Player=false
            SoundSynth=true
        ;;
        g)
            LiveMusicCharts.py /home/MySongs/FusionBlue/ -f -c -i -r
        ;;
        i)
            InternetJamStart=true
        ;;
        j)
            echo "JamStik"
            JamStik=true
        ;;
        k)
            echo "Debugging"
            WeAreDebugging=true
            BackroundChecker=false
            MP3Player=false
            MidiController=true
            GuitarEffects=true
            VSTGuitarEffects=false
            SoundSynth=true
            Looper=true
        ;;
        l)
            echo "Looper"
            Looper=true
        ;;
        m)
            echo "MP3 Player"
            MP3Player=true
        ;;
        n)
            echo "Muse"
            MusePlayer=true
        ;;
        o)
            echo "Muse Score"
            MuseScore=true
        ;;
        r)
            echo "Rosegarden"
            Rosegarden=true
        ;;
        u)
            echo "Debugging"
            WeAreDebugging=true
            BackroundChecker=false
            MP3Player=false
            MidiController=true
            GuitarEffects=false
            VSTGuitarEffects=true
            SoundSynth=true
            Looper=true
            EffectsProcessorWM="Carla"
            set -x

        ;;
        t)
            echo "Tab Player"
            TabPlayer=true
        ;;
        l)
            echo "Looper"
            Looper=true
        ;;
        p)
            echo "PDF"
            MusicViewer=true
        ;;
        q)

            MP3Player=true
            MidiController=true
            GuitarEffects=true
            VSTGuitarEffects=false
            BackroundChecker=true
            SoundSynth=true
            Looper=true

            $PipeStart muse /home/Music/GuitarSoundTest/GuitarSoundTest.med &
        ;;
        s)
            StopEverything
            exit 0
        ;;
        o)
            Group=$OPTARG
        ;;
        w)
            echo "PDF"
            Rosegarden=true
            MidiController=false
            GuitarEffects=false
            VSTGuitarEffects=false
            MusicViewer=false
        ;;
        x)
            echo "Kill Pipewire"
            PatchBay="catia"
            #            sleep 1
        ;;
        ?)
            # getopts issues an error message
            echo $USAGE >&2
            exit 1
        ;;
    esac
done

RunCount=`pgrep -c LiveMusicApp `
if [[ RunCount -gt 1 ]]; then
    echo "********** Multiple Version running, killing."
    exit 1
fi

#  the computer from screen saving.
xset s off         # don't activate screensaver
xset -dpms         # disable DPMS (Energy Star) features.
xset s noblank     # don't blank the video device
qdbus org.freedesktop.ScreenSaver /ScreenSaver Inhibit NULL NULL
qdbus org.freedesktop.ScreenSaver /ScreenSaver SetActive false
# FAHClient --send-pause "LiveMusicApp_Running"
# Remove the switches we parsed above.
shift `expr $OPTIND - 1`

# Access additional arguments as usual through
# variables $@, $*, $1, $2, etc. or using this loop:
for PARAM; do
    echo $PARAM
done

date  > $LogFile
export IAM=`whoami`
PipeActive=`ps aux | grep pipewire | wc -l`
if [[ $PipeActive > 1 ]];  then
    echo "Pipe found"
    UsePipeWire="Yes"
    PipeStart="pw-jack -s 96000"
    PipeOption=" -w "
    PatchBay="qpwgraph"
    PatchBayName="qpwgraph"
    # PatchBay="raysession"
    # PatchBayName="raysession"
else
    echo "Pipe Not found"
    UsePipeWire="No"
    PipeStart=""
    PipeOption="-e"
    PatchBay="catia"
    PatchBayName="catia"
    #PIPEWIRE_LATENCY=128/48000
fi

echo "Pipewire "$PipeStart" Active "$PipeActive  | tee $LogFile
echo -n "System Timer " | tee $LogFile
cat /sys/devices/system/clocksource/clocksource0/current_clocksource

echo -n "Timer Speed " | tee $LogFile
cat /sys/class/rtc/rtc0/max_user_freq

GXSize=`wc -c /home/elias/.config/guitarix/gx_head_rc | awk '{print $1}'`
if [ $GXSize -ge 150000 ];
then
    zenity --warning \
    --text=" gx_head_rc too large "$GXSize
    # The end (connections) of the gx_head_rc file get's large.
    # jack_connections remove.
fi

# Set the definitions for the functions.
echo "Set Definitions"  | tee $LogFile
SetDefinitions

Delay 1
if [ `ps -ew | grep -c jack-plumbing` == 0 ] ; then
echo "Jack Plumbing" | tee $LogFile
   $PipeStart  jack-plumbing /home/MySongs/Prefs/jack-plumbing >> $LogFile 2>&1 &
fi

# lsof -i -P -n | grep -e 9951 -e 9952 -e 22752

#pactl load-module module-null-sink sink_name=virtmic \
# sink_properties=device.description=jack-volume:input_2
# pw-link J3Sink:monitor_FL jack-volume:input_3
# pactl set-default-sink J3Sink

# In case the OSC port didn't close.
# NetSt=`netstat -np | grep -i Live`
# OSCPID=`echo $NetSt awk -F '[ /]'  '{ print $8}'`
#kill $OSCPID

lsof -i -P -n | grep -e 9951 -e 9952 -e 22752
ss --kill state listening src :9951
ss --kill state listening src :9952
ss --kill state listening src :22752
fuser -k 1234/udp
fuser -k 22752/udp

echo "***************** Starting SetUpApplications"  | tee $LogFile
# Set up the other applications.
# $PipeStart  a2jmidi_bridge "GuitBridge" &
SetUpApplications
echo "***************** Starting SetPlacement"  | tee $LogFile
SetPlacement
SetUpConnections

Delay 10
SetPlacement
SetUpConnections

exit #### EJK

# ejk Check this
if [[ $UsePipeWire == "Yes" ]]; then
    PipeConnect.sh 
fi

SetPlacement

exit 0

# Check for file size on this:
# /home/elias/.config/guitarix/gx_head_rc
#
# lsp-plugins-loud-comp-mono -c /home/elias/LoudCompensation.cfg
#loud_comp_mono:in
#loud_comp_mono:out


# GDK_BACKEND=broadway BROADWAY_DISPLAY=:5 gtk3-demo

# Pipewire
# pw-metadata -n settings 0 clock.force-quantum 128
# PIPEWIRE_LATENCY="128/48000" pw-jack reaper
# pw-metadata -n settings 0 clock.force-rate 48000
# pw-metadata -n settings 0 clock.force-quantum 64
# pw-metadata -n settings 0 clock.rate <value>
# pw-metadata -n settings 0 clock.force-rate <samplerate>
# pw-top
# pw-jack -p 512 -s 44100

# abGate 
# Thres  Att  Hold  Decay  Range
# -52    0.1  489    5.0    -46 Acoustic-1
# -52    0.1  489   5.0     -46 Acoustic

#Comppressor
# Ratio  Thres Knee Att  Res
#  20    -30    19.5 0    8.10  Acoustic-1
# 15.9  -37.9   10.0  0   8.10  Acoustic


Acoustic
Tuner
abGateCompressor
Head
Graphic EQ
Volume
ImpulseResponse
Freeverb
Loudness


exit


/usr/src/Music/Impro-Visor10.2/impro-visor


